
//utils
@mixin fd-reset {
    font-size: $fd-font-size;
    line-height: $fd-line-height;
    color: $fd-color;
    font-family: $fd-font-family;
}

//els
@mixin fd-form-base {
    @include fd-reset;
    @include fd-type("0", body);
    appearance: none;
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    font-size: inherit;
    box-sizing: border-box;
    outline: none;
    border-style: solid;
    border-width: 1px;
    border-color: $fd-forms-border-color;
    border-radius: $fd-border-radius;
    color: $fd-forms-color;
    //background-color: $fd-forms-background-color;
    background-color: transparent;
    transition: border-color $fd-animation--speed;
    //states
    &:focus,
    &:hover {
        border-color: $fd-forms-border-color--focus;
        //background-color: $fd-forms-background-color;
    }
    &.is-invalid {
        border-color: $fd-color--error;
    }
    &.is-valid {
        border-color: $fd-color--success;
    }
    &.is-warning {
        border-color: $fd-color--warning;
    }
    &:disabled,
    &[aria-disabled="true"],
    &.is-disabled {
        cursor: not-allowed;
        color: $fd-forms-color--disabled;
        border-color: $fd-forms-border-color--disabled;
        background-color: $fd-forms-background-color--disabled;
    }
    &[readonly],
    &.is-readonly {
        color: $fd-forms-color;
        //background-color: $fd-forms-background-color;
        border-color: $fd-forms-border-color--disabled;
        border-width: 0 0 1px;
        border-radius: 0;
    }
    @content;
}
@mixin fd-form-text {
    @include fd-form-base;
    height: $fd-forms-height--input-text;
    padding-left: $fd-forms-padding;
    padding-right: $fd-forms-padding;
    @content;
}
@mixin fd-form-select {
    @include fd-form-text;
    appearance: none;
    -moz-appearance: none;
    background-image: url(#{$fd-forms-select-background-image});
    background-repeat: no-repeat;
    background-position: calc(100% - #{$fd-forms-select-width--background-image}) center;
    padding-right: ($fd-forms-padding * 2) + $fd-forms-select-width--background-image;
    &:focus,
    &:hover {
        background-image: url(#{$fd-forms-select-background-image--active});
    }
    &[aria-expanded="true"],
    &.is-expanded {
        background-image: url(#{$fd-forms-select-background-image--active-expanded});
    }
    &[disabled],
    &[aria-disabled="true"],
    &.is-disabled {
        background-image: url(#{$fd-forms-select-background-image--disabled});
    }
    @content;
}
@mixin fd-clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}
@mixin fd-last-child {
    &:last-child {
        margin-bottom: 0;
        margin-right: 0;
        @content;
    }
}
@mixin fd-first-child {
    &:first-child {
        margin-left: 0;
        @content;
    }
}
@mixin fd-screen($size, $dimension: width) {
  @if map-has-key($fd-breakpoints, $size) {
    @media (min-#{$dimension}: map-get($fd-breakpoints, $size)) {
        @content;
    }
  } @else {
    @warn "Unknown `#{$size}` in $fd-breakpoints map";
  }
}
@mixin fd-print() {
	@media print {
		@content;
	}
}
//$size: -3,-2,-1,0,1,2,3,4,5
//$font: body, header, code
//$weight: reg, med, semi
//$transform: none, uppercase, lowercase
@mixin fd-type($size: "0", $font: default, $weight: default, $transform: default) {
    //get type map — set default to 0
    $list: map-get($fd-type, "0");
    @if map-has-key($fd-type, $size) {
        $list: map-get($fd-type, $size);
    } @else {
        @warn "Unknown `#{$size}` in $type map";
    }
    font-size: nth($list, 1);
    line-height: nth($list, 2);
    //HANDLE TYPE FACE
    @if $font != default {
        //explicitly
        @if map-has-key($fd-fonts, $font) {
            font-family: map-get($fd-fonts, $font);
        } @else {
            @warn "Unknown `#{$fd-font}` in $fonts map";
        }
    } @else {
        //implicity
        $_font: nth($list, 3);
        @if $_font != body {
            font-family: map-get($fd-fonts, $_font);
        }
    }
    //HANDLE WEIGHT
    @if $weight != default {
        @include fd-weight($weight);
    } @else {
        //implicity
        $_weight: nth($list, 4);
        @include fd-weight($_weight);
    }
    //HANDLE TRANSFORM
    @if $transform != default {
        text-transform: $transform;
    } @else {
        //implicity
        $_transform: nth($list, 5);
        @if $_transform != none {
            text-transform: $_transform;
        }
    }
}
@mixin fd-weight($weight: reg) {
    @if $weight == light {
        font-weight: 300;
    } @else if $weight == reg {
        font-weight: 400;
    } @else if $weight == med {
        font-weight: 500;
    } @else if $weight == semi {
        font-weight: 600;
    } @else if $weight == bold {
        font-weight: 700;
    } @else if $weight == black {
       font-weight: 900;
   }
}
//Taken from https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/library/_triangle.scss
@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}
@mixin rotate($deg: 90){
    $sDeg: #{$deg}deg;
    -webkit-transform: rotate($sDeg);
    -moz-transform: rotate($sDeg);
    -ms-transform: rotate($sDeg);
    -o-transform: rotate($sDeg);
    transform: rotate($sDeg);
}
