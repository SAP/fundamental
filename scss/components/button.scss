@import "./../settings";
@import "./../mixins";
@import "./../functions";
@import "./../icons/mixins";

/*!
.fd-button+( (--small | --large), --icon, --text, --link, --action-bar)+( (.is-disabled | [aria-disabled=true]) | (.is-selected | [aria-selected=true] | (.is-pressed | [aria-pressed=true]))
*/

$block: #{$fd-namespace}-button;
.#{$block} {
  //SETTINGS
  //SIZES â€” size: height "text size" "icon size"
  $fd-button-sizes: (
      "default": $fd-forms-height "0" "l", //36px
      "compact": fd-space(8) "0" "m", //32px
      "xs": fd-space(6) "-1" "s", //24px
      "s": fd-space(7) "0" "m", //28px
      "l": fd-space(10) "0" "l", //40px
  ) !default;

  //default
  $fd-button-color: $fd-link-color !default;
  $fd-button-color--inverse: fd-color("text", 5) !default;
  $fd-button-color--hover: fd-color-state("hover", "action") !default;
  $fd-button-color--pressed: fd-color-state("selected", "action") !default;
  $fd-button-color--active: fd-color-state("selected", "action") !default;
  $fd-button-background-color: fd-color("background", 2) !default;

  //anim
  $fd-button-transition-params: $fd-animation--speed ease-in !default;

  //spacing
  $fd-button-padding-x: fd-space(3)/1.2 !default;

  //BASE
  //set all reset and baseline block styles
  $defaults: map-get($fd-button-sizes, "default");
  @at-root {
    .#{$block}, [class*="#{$block}--"] {
      @include fd-button-reset;
      @include fd-type(nth($defaults, 2));
      @include fd-icon-size(nth($defaults, 3));
      background-color: $fd-button-background-color;
      color: $fd-button-color;
      border: solid 1px $fd-button-color;
      padding-left: $fd-button-padding-x;
      padding-right: $fd-button-padding-x;
      height: nth($defaults, 1);
      max-height: nth($defaults, 1);
      min-width: nth($defaults, 1);
      transition: all $fd-button-transition-params;
      line-height: 1;
      &::before {
        margin-right: fd-space(2);
        vertical-align: middle;
      }
      &::after {
        margin-left: fd-space(2);
        vertical-align: middle;
      }
      &[aria-disabled="true"],
      &.is-disabled,
      &:disabled {
        opacity: 0.4;
        cursor: not-allowed;
      }
      &:empty {
        &::before {
          margin-right: 0;
        }
        &::after {
          margin-left: 0;
        }
      }
      //DEFAULT
      @include fd-hover {
        border-color: $fd-button-color--hover;
        color: $fd-button-color--hover;
        box-shadow: 0px 0px 0px 1px $fd-button-color;
      }
      @include fd-selected {
        background-color: $fd-button-color--active;
        border-color: $fd-button-color--active;
        color: fd-color("text", 5);
      }
      @include fd-focus;
      @include fd-disabled {
        background-color: $fd-button-background-color;
        color: $fd-button-color;
      }
    }
  }

  //TYPES
  &--positive {
    color: $fd-color--success;
    border-color: $fd-color--success;
    @include fd-hover {
      border-color: fd-color-darker($fd-color--success);
      color: fd-color-darker($fd-color--success);
      box-shadow: 0px 0px 0px 1px $fd-color--success;
    }
    @include fd-selected {
      background-color: fd-color-darkest($fd-color--success);
      border-color: fd-color-darkest($fd-color--success);
      color: $fd-button-color--inverse;
    }
    @include fd-disabled {
      background-color: $fd-button-background-color;
      color: $fd-color--success;
    }
  }
  &--negative {
    color: $fd-color--error;
    border-color: $fd-color--error;
    @include fd-hover {
      border-color: fd-color-darker($fd-color--error);
      color: fd-color-darker($fd-color--error);
      box-shadow: 0px 0px 0px 1px $fd-color--error;
    }
    @include fd-selected {
      background-color: fd-color-darkest($fd-color--error);
      border-color: fd-color-darkest($fd-color--error);
      color: fd-color("text", 5);
    }
    @include fd-disabled {
      background-color: $fd-button-background-color;
      color: $fd-color--error;
    }
  }

  &--main,
  &--action-bar {
    color: $fd-button-color--inverse;
    background-color: $fd-button-color;
    border-color: $fd-button-color;
    @include fd-hover {
      background-color: $fd-button-color--hover;
      border-color: $fd-button-color--hover;
      color: $fd-button-color--inverse;
      box-shadow: none;
    }
    @include fd-selected {
      background-color: $fd-button-color--active;
      border-color: $fd-button-color--active;
    }
    @include fd-disabled {
      background-color: $fd-button-color;
      color: $fd-button-color--inverse;
    }
    &.#{$block}--positive {
      background-color: $fd-color--success;
      border-color: $fd-color--success;
      @include fd-hover {
        background-color: fd-color-darker($fd-color--success);
        border-color: fd-color-darker($fd-color--success);
        color: $fd-button-color--inverse;
      }
      @include fd-selected {
        color: $fd-button-color--inverse;
        background-color: fd-color-darkest($fd-color--success);
        border-color: fd-color-darkest($fd-color--success);
      }
      @include fd-disabled {
        background-color: $fd-color--success;
        color: $fd-button-color--inverse;
      }
    }
    &.#{$block}--negative {
      background-color: $fd-color--error;
      border-color: $fd-color--error;
      @include fd-hover {
        background-color: fd-color-darker($fd-color--error);
        border-color: fd-color-darker($fd-color--error);
        color: $fd-button-color--inverse;
      }
      @include fd-selected {
        color: $fd-button-color--inverse;
        background-color: fd-color-darkest($fd-color--error);
        border-color: fd-color-darkest($fd-color--error);
      }
      @include fd-disabled {
        background-color: $fd-color--error;
        color: $fd-button-color--inverse;
      }
    }
  }

  &--secondary {
    color: $fd-button-color;
    border-color: transparent;
    background-color: transparent;
    @include fd-hover {
      background-color: fd-color("neutral", 1);
      border-color: transparent;
      box-shadow: none;
    }
    @include fd-selected {
      color: $fd-button-color;
      background-color: fd-color("neutral",2);
      border-color: transparent;
    }
    @include fd-disabled {
      background-color: $fd-button-background-color;
    }
  }

  &--toolbar,
  &--grouped {
    color: fd-color("text", 2);
    background-color: fd-color("neutral", 1);
    border-color: fd-color("neutral", 3);
    box-shadow: 0 1px 0 0 rgba(lighten(fd-color("text", 2),50), 1);
    @include fd-hover {
      color: fd-color("text", 2);
      background-color: fd-color-darker(fd-color("neutral", 1));
      border-color: fd-color-darker(fd-color("neutral", 1));
      box-shadow: none;
    }
    &:active,
    &.is-active {
      //color: fd-color("text", 2);
      background-color: fd-color-darkest(fd-color("neutral", 1));
      border-color: fd-color-darkest(fd-color("neutral", 1));
      box-shadow: none;
    }
    &[aria-selected="true"],
    &.is-selected,
    &[aria-pressed="true"],
    &.is-pressed {
      border-color: transparent;
      color: $fd-button-color--inverse;
      background-color: fd-color-darkest($fd-button-color);
    }
    @include fd-disabled {
      color: fd-color("text", 2);
      background-color: fd-color("neutral", 1);
      border-color: fd-color("neutral", 3);
    }
  }

  //SIZES
  @each $key, $list in $fd-button-sizes {
    @if $key != "default" {
      &--#{$key} {
        @include fd-type(nth($list, 2));
        @include fd-icon-size(nth($list, 3), "before");
        @include fd-icon-size(nth($list, 3), "after");
        height: nth($list,1);
        max-height: nth($list, 1);
        min-width: nth($list, 1);
        line-height: 1;
        @if $key == "xs" {
          padding-left: $fd-button-padding-x / 1.25;
          padding-right: $fd-button-padding-x / 1.25;
          &::before,
          &::after {
            vertical-align: baseline;
          }
        }
        @if $key == "l" {
          padding-left: $fd-button-padding-x * 1.2;
          padding-right: $fd-button-padding-x * 1.2;
        }
        @if $key == "xs" or $key == "s" or $key == "compact"  {
          &::before {
            margin-right: fd-space(2) / 1.333;
          }
          &::after {
            margin-left: fd-space(2) / 1.333;
          }
        }
      }
    }
  }
}
