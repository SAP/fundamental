{% extends "layout.njk" %}
{% from "./../format.njk" import format %}
{% from "../button/component.njk" import button %}
{% from "./component.njk" import calendar %}

<!-- include add'tl css from src/styles/, e.g., ['helpers','components/button'] -->
{% set css_deps = ['icons','components/button'] %}

{% block content %}
<style>
main {background-color: white;}

</style>


<p>The <code>.fd-calendar__item</code> container takes the majority of styling. The rest of the markup provides the structure and layout.
</p>
<p>Classes available for <code>.fd-calendar__item</code>. All are available to dates, months, and years.</p>
<style media="screen">
    .calander-info{ background: #ccc;}
    .calander-info td{ background: #fff;}
</style>
<table class="fd-calendar calander-info" cellpadding="10" cellspacing="1" style="width: auto;">
  <tr>
    <th colspan=3 style="text-align:left;">

      <h3>modifiers</h3>
<span style="font-weight: normal;">
  These are static classes set at load time, not affected by any user selections in the calendar itself
</span>
    </th>
  </tr>
  <tr>
    <td><code>.fd-calendar__item</code></td>
    <td>Base class defaulted to an interactive element</td>
    <td>
<div class="fd-calendar__item">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.fd-calendar__item--other-month</code></td>
    <td>Apply to dates outside the current month</td>
    <td>
<div class="fd-calendar__item fd-calendar__item--other-month">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.fd-calendar__item--current</code></td>
    <td>Apply to the current today, this month, this year </td>
    <td>
<div class="fd-calendar__item fd-calendar__item--current">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.fd-calendar__item--disabled</code></td>
    <td>Cannot be selected, usually applied to a large range of past or future dates</td>
    <td>
<div class="fd-calendar__item fd-calendar__item--disabled">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.fd-calendar__item--blocked</code></td>
    <td>Cannot be selected, usually applied to blackout or booked dates mixed in with available dates</td>
    <td>
<div class="fd-calendar__item fd-calendar__item--blocked">20</div>
    </td>
  </tr>
  <tr>
    <th colspan=3 style="text-align:left;">
<h3>states</h3>

      <span style="font-weight: normal;">
      These are dynamic classes which are affected by user selections
      </span>
    </th>
  </tr>
  <tr>
    <td><code>.is-disabled</code></td>
    <td>(redundant) Cannot be selected, usually applied to a large range of past or future dates</td>
    <td>
<div class="fd-calendar__item is-disabled">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.is-blocked</code></td>
    <td>(redundant) Cannot be selected, usually applied to blackout or booked dates mixed in with available dates </td>
    <td>
<div class="fd-calendar__item is-blocked">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.is-selected</code></td>
    <td>Currently selected date AND the first and last dates in a range</td>
    <td>
<div class="fd-calendar__item is-selected">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.is-selected-range</code></td>
    <td>A date in the range between the first and last selected dates</td>
    <td>
<div class="fd-calendar__item is-selected-range">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.is-selected-range-first</code>*</td>
    <td>The first date in a selected range</td>
    <td>
<div class="fd-calendar__item is-selected is-selected-range-first">20</div>
    </td>
  </tr>
  <tr>
    <td><code>.is-selected-range-last</code>*</td>
    <td> The last date in a selected range</td>
    <td>
<div class="fd-calendar__item is-selected is-selected-range-last">20</div>
    </td>
  </tr>
  <tfoot>
    <td colspan="3">
      <small>* These are <code>-first</code> and <code>-last</code> classes are only necessary to adjust the border radius.
      </small>
    </td>

  </tfoot>
</table>


<br><br>
  <h2>dates, month, years</h2>
    <!-- output the component example and the code snippet -->
    {% set example %}
    {{  calendar(
            properties=data.properties,
            modifier={
                block: data.modifier.block
            },
            state=data.state,
            aria=data.aria
        )
    }}

        {% endset %}
        {{ format(example) }}


        <br><br>

  <h2>dates</h2>
  <p>The previous and next controls are standard buttons with all available states. For example, add <code>disabled</code> or <code>aria-disabled="true"</code> to gray out the previous button when past dates are not allowed.</p>
  {% set example %}
  {{  calendar({
    "month": 8,
    "year": 2018,
    "today": 6,
    "dates": {
      "daysOffset": 3,
      "block": [25,29],
      "selected": 15,
      "disablePast": true
    }
    })
  }}
  {% endset %}
  {{ format(example) }}


<br><br>

<h2>months</h2>
{% set example %}
{{  calendar({
    "month": 0,
    "year": 2018,
    "today": 3,
    "months": {
      "selected": 2,
      "show": true
    }
  })
}}
{% endset %}
{{ format(example) }}

<br><br>
<h2>years</h2>
{% set example %}
{{  calendar({
    "month": 0,
    "year": 2018,
    "today": 3,
    "years": {
      "selected": 3,
      "show": true
    }
  })
}}
{% endset %}
{{ format(example) }}


<script>
(function() {
    //climb up DOM to get block element
    function getBlock(control) {
        var block = control.parentNode;
        while (block.getAttribute("role") !== "tablist") {
            block = block.parentNode;
        }
        return block;
    }
    //get all calendars
    var calendars = document.querySelectorAll('.fd-calendar');

    var calendar = calendars[0];

    //get all triggers
    var content_panels = calendar.querySelectorAll('[aria-hidden]');
    var content_controls = calendar.querySelectorAll('[aria-controls]');

    var resetToDefault = function() {
      for (var i = 0; i < content_panels.length; i++) {
        content_panels[i].setAttribute("aria-hidden", i !== 0);
      }
      for (var i = 0; i < content_controls.length; i++) {
        content_controls[i].setAttribute("aria-selected", false);
        content_controls[i].setAttribute("aria-expanded", false);
      }
    }
    var hideAll = function() {
      for (var i = 0; i < content_panels.length; i++) {
        content_panels[i].setAttribute("aria-hidden", true);
      }
      for (var i = 0; i < content_controls.length; i++) {
        content_controls[i].setAttribute("aria-selected", false);
        content_controls[i].setAttribute("aria-expanded", false);
      }
    }
    //handle each control
    for (let i = 0; i < content_controls.length; i++) {
      let control = content_controls[i];
      control.addEventListener('click', function(e) {
          e.preventDefault();
          if (this.getAttribute("aria-expanded") === "true") {
            resetToDefault();
          } else {
            hideAll();
            //get panel
            let panelId = this.getAttribute("aria-controls");
            console.log(panelId);
            var panel = document.getElementById(panelId);
            panel.setAttribute("aria-hidden", false);
            //set states
            this.setAttribute("aria-selected", true);
            this.setAttribute("aria-expanded", true);
          }
      })
    }

})();

</script>


{% endblock %}
